#include <Arduino.h>


#include <UTFT.h>
UTFT myGLCD(CTE70, 38, 39, 40, 41);

#include <UTouch.h>
UTouch  myTouch( 6, 5, 4, 3, 2);

// extern uint8_t BigFont[];
extern uint8_t GroteskBold16x32[];

#define Default_Ignore_Input_For 2000 // Time in millisecounds CHANGE ME


unsigned long Top_Bar_Ignore_Input_Until;


#define Main_Page_Ignore_Input_For 750 // Time in millisecounds CHANGE ME
#define Main_Page_Delay_Output_For 2500
#define Main_Page_Dimmer_Maker_Size_X 5 // It adds X pixels to each side
#define Main_Page_Dimmer_Maker_Move_Ignore_For 75
unsigned long Main_Page_Ignore_Input_Until;
unsigned long Main_Page_Delay_Output_Until;
unsigned long Main_Page_Dimmer_Maker_Move_Ignore_Untill;
bool Main_Page_Delay_Output_Waiting = false;
int Main_Page_Dimmer_Last_Marker_Potition = -9999;


int Display_Center_X;
int Display_Center_Y;

int Button_Spazing = 50;

#define Top_Bar_Size 50


int Touch_Input_X, Touch_Input_Y;



int Light_Strenght = 180; // CNAMGE ME



#define Page_Number_Last 3
int Page_Number = 1;
String Page_Number_Text_Array[Page_Number_Last] = {"Main","Relay's","Voltmeter's"};




void Main_Page() {

  myGLCD.Set_Button_Size(200, 90);
  myGLCD.Set_Button_Edge_Size(4);
  myGLCD.Set_Button_Matrix_Spacing(50);

  myGLCD.Draw_Button_Matrix("Old Lights", 1, 1);
  myGLCD.Draw_Button_Matrix("Red Lights", 2, 1);
  myGLCD.Draw_Button_Matrix("Gen / Inv", 3, 1);

  myGLCD.Draw_Button_Matrix("Internet", 1, 2);










  // --------------- 3 X 1 ---------------
  // --------------- Dimmer - Main ---------------
  myGLCD.Set_Button_Size_2(myGLCD.getDisplayXSize() - myGLCD.Get_Button_Matrix_Spacing() * 2, myGLCD.Get_Button_Size_Y());
  myGLCD.Draw_Button_Matrix("", 1, 3, true); // _Button_Size_2
} // END MARKER - Main_Page

void Main_Page_Touch() {


  myTouch.Set_Button_Size(200, 90);
  myTouch.Set_Button_Matrix_Spacing(50);




  // --------------------------------------------- Dimmer Send ---------------------------------------------
  if (Main_Page_Delay_Output_Waiting == true && Main_Page_Delay_Output_Until < millis()) {
    Serial.print("Send Output - Main Page - Dimmer: "); // REMOVE ME
    Serial.println(Light_Strenght); // REMOVE ME

    Main_Page_Delay_Output_Waiting = false;
  }

    // --------------------------------------------- 3 X 1 ---------------------------------------------
    if (Touch_Input_X > 0 && Touch_Input_X < myGLCD.getDisplayXSize()) {

      if (Touch_Input_X > 0 && Touch_Input_X < Button_Spazing) { // Uses the space before the bar to make a bigger touch spot for 0%
        Light_Strenght = 0;
        Touch_Input_X = Button_Spazing + Main_Page_Dimmer_Maker_Size_X + 2 + myGLCD.Get_Button_Edge_Size(); // To make the maker apear at the start of the dimmer
      }

      else if (Touch_Input_X > myGLCD.getDisplayXSize() - Button_Spazing && Touch_Input_X < myGLCD.getDisplayXSize()) { // Asme as above just oposite (100%)
        Light_Strenght = 255;
        Touch_Input_X = myGLCD.getDisplayXSize() - Button_Spazing - Main_Page_Dimmer_Maker_Size_X - 2 - myGLCD.Get_Button_Edge_Size(); // To make the maker apear at the end of the dimmer
      }

      else {
        Light_Strenght = float((Touch_Input_X - Button_Spazing)  / 2.74); // 700 (Length of bar) / 255 (analogWrite Max) = 2,745098039215686 = 2.4 (rounding down to make sure it can go to 100%)
      }

      Main_Page_Delay_Output_Waiting = true;
      Main_Page_Delay_Output_Until = millis() + Main_Page_Delay_Output_For;
    } // END MARKER - 3 X 1

    if (Main_Page_Dimmer_Maker_Move_Ignore_Untill < millis()) {


      // Removing the old maker
      if (Main_Page_Dimmer_Last_Marker_Potition != -9999) { // -9999 = No marker present
        myGLCD.setColor(0, 255, 0);
        myGLCD.fillRoundRect(
                              Main_Page_Dimmer_Last_Marker_Potition - Main_Page_Dimmer_Maker_Size_X,
                              (Top_Bar_Size + Button_Spazing * 3 + myGLCD.Get_Button_Size_Y() * 2) + 2 + myGLCD.Get_Button_Edge_Size(),
                              Main_Page_Dimmer_Last_Marker_Potition + Main_Page_Dimmer_Maker_Size_X,
                              (Top_Bar_Size + Button_Spazing * 3 + myGLCD.Get_Button_Size_Y() * 3) - 2 - myGLCD.Get_Button_Edge_Size()
                            );
      }

      // Draws the new maker
      myGLCD.setColor(255, 255, 255);
      myGLCD.fillRoundRect(
                            Touch_Input_X - Main_Page_Dimmer_Maker_Size_X,
                            (Top_Bar_Size + Button_Spazing * 3 + myGLCD.Get_Button_Size_Y() * 2) + 2 + myGLCD.Get_Button_Edge_Size(),
                            Touch_Input_X + Main_Page_Dimmer_Maker_Size_X,
                            (Top_Bar_Size + Button_Spazing * 3 + myGLCD.Get_Button_Size_Y() * 3) - 2 - myGLCD.Get_Button_Edge_Size()
                          );

      // Notes marker potition
      Main_Page_Dimmer_Last_Marker_Potition = Touch_Input_X;
      Main_Page_Dimmer_Maker_Move_Ignore_Untill = millis() + Main_Page_Dimmer_Maker_Move_Ignore_For;
  }





  if (Main_Page_Ignore_Input_Until > millis()) return;

  // --------------------------------------------- 1 X ? ---------------------------------------------
  else if (Touch_Input_Y > Top_Bar_Size + Button_Spazing && Touch_Input_Y < Top_Bar_Size + Button_Spazing + myGLCD.Get_Button_Size_Y()) {


    // --------------------------------------------- 1 X 1 ---------------------------------------------
    if (Touch_Input_X > Button_Spazing && Touch_Input_X < (Button_Spazing + myGLCD.Get_Button_Size_X())) {
      Main_Page_Ignore_Input_Until = millis() + Main_Page_Ignore_Input_For;
      Serial.println("1 X 1"); // REMOVE ME
    }

    // --------------------------------------------- 1 X 2 ---------------------------------------------
    else if (Touch_Input_X > (Button_Spazing * 2 + myGLCD.Get_Button_Size_X()) && Touch_Input_X < (Button_Spazing * 2 + myGLCD.Get_Button_Size_X() * 2)) {
      Main_Page_Ignore_Input_Until = millis() + Main_Page_Ignore_Input_For;
      Serial.println("1 X 2"); // REMOVE ME
    }

    // --------------------------------------------- 1 X 2 ---------------------------------------------
    else if (Touch_Input_X > (Button_Spazing * 3 + myGLCD.Get_Button_Size_X() * 2) && Touch_Input_X < (Button_Spazing * 3 + myGLCD.Get_Button_Size_X() * 3)) {
      Main_Page_Ignore_Input_Until = millis() + Main_Page_Ignore_Input_For;
      Serial.println("1 X 3"); // REMOVE ME
    }
  }


  // --------------------------------------------- 2 X ? ---------------------------------------------
  else if (Touch_Input_Y > Top_Bar_Size + Button_Spazing * 2 + myGLCD.Get_Button_Size_Y() && Touch_Input_Y < Top_Bar_Size + Button_Spazing * 2 + myGLCD.Get_Button_Size_Y() * 2) {

    // --------------------------------------------- 2 X 1 ---------------------------------------------
    if (Touch_Input_X > Button_Spazing && Touch_Input_X < (Button_Spazing + myGLCD.Get_Button_Size_X())) {
      Main_Page_Ignore_Input_Until = millis() + Main_Page_Ignore_Input_For;
      Serial.println("2 X 1"); // REMOVE ME
    }

  }



} // END MARKER - Main_Page_Touch


void Relay_Page() {

  myGLCD.Set_Button_Size(200, 90);
  myGLCD.Set_Button_Edge_Size(4);
  myGLCD.Set_Button_Matrix_Spacing(50);

  myGLCD.Draw_Button_Matrix("Old Lights", 1, 1);
  myGLCD.Draw_Button_Matrix("Main Lights", 2, 1);
  myGLCD.Draw_Button_Matrix("Red Lights", 3, 1);

  myGLCD.Draw_Button_Matrix("USB Charger", 1, 2);
  myGLCD.Draw_Button_Matrix("Bilge pump", 2, 2);
  myGLCD.Draw_Button_Matrix("Gen / Inv", 3, 2);

  myGLCD.Draw_Button_Matrix("Back Lights", 1, 3);
  myGLCD.Draw_Button_Matrix("Internet", 2, 3);

} // End Marker - Main_Controles

void Relay_Page_Touch() {

} // END MARKER - Relay_Page_Touch


void Voltmeter_Page() {

  myGLCD.Set_Button_Size(200, 90);

  myGLCD.Draw_Button_Matrix("Voltmeter 1", 1, 1);

} // END MARKER - Main_Page_Touch

void Voltmeter_Page_Touch() {

} // END MARKER - Main_Page_Touch


void VLC_Interface() {

  // USE draw.pixl to make play buttons and so on


  #ifndef CENTER_Y
  #define CENTER_Y myGLCD.getDisplayYSize() / 2
  #endif

  // int xStart;
  // int yStart;


  //
  //
  // // --------------- Previous ---------------
  // xStart = 50;
  // yStart = CENTER_Y - myGLCD.Button_Size_Y() / 2;
  //
  // myGLCD.setColor(0, 50, 60);
  // myGLCD.fillRoundRect (xStart, yStart, xStart + myGLCD.Button_Size_X(), yStart + myGLCD.Button_Size_Y());
  //
  // myGLCD.setColor(255, 255, 255);
  // myGLCD.drawRoundRect (xStart, yStart, xStart + myGLCD.Button_Size_X(), yStart + myGLCD.Button_Size_Y());
  //
  // myGLCD.setBackColor(0, 50, 60);
  // myGLCD.print(String("Previous"), xStart + 30, yStart + 15);
  //
  //
  //
  //
  //
  //
  //
  //

  //
  //  // --------------- Play ---------------
  //  xStart = CENTER;
  //  yStart = CENTER - 15;
  //
  //
  //  myGLCD.setColor(0, 50, 60);
  //  myGLCD.fillRoundRect (xStart, yStart, xStart + myGLCD.Button_Size_X(), yStart + myGLCD.Button_Size_Y());
  //
  //  myGLCD.setColor(255, 255, 255);
  //  myGLCD.drawRoundRect (xStart, yStart, xStart + myGLCD.Button_Size_X(), yStart + myGLCD.Button_Size_Y());
  //
  //  myGLCD.setBackColor(0, 50, 60);
  //  myGLCD.print("Play", xStart + 30, yStart + 15);
  //
  //
  //


}

void VLC_Interface_Touch() {

}


void Top_Bar() {

  myGLCD.clrScr();

  myGLCD.Set_Button_Size(myGLCD.getDisplayXSize() - 1, Top_Bar_Size);
  myGLCD.Set_Button_Edge_Size(0);

  myGLCD.Draw_Button(Page_Number_Text_Array[Page_Number - 1], 0, 0);

  if (Page_Number < 10) {
    myGLCD.Set_Button_Size_2(5 * myGLCD.getFontXsize(), Top_Bar_Size);
  }

  else {
    myGLCD.Set_Button_Size_2(6 * myGLCD.getFontXsize(), Top_Bar_Size);
  }

  myGLCD.Set_Button_Edge_Size(4);

  if (Page_Number != 1) {
    String Page_Number_Text = "<< " + String(Page_Number - 1);

    myGLCD.Draw_Button(Page_Number_Text, 0, 0, true); // _Button_Size_2
  }

  if (Page_Number != Page_Number_Last) {
    String Page_Number_Text = String(Page_Number + 1) + " >>";

    myGLCD.Draw_Button(Page_Number_Text, myGLCD.getDisplayXSize() - 1 - myGLCD.Get_Button_Size_2_X(), 0, true); // _Button_Size_2
  }

       if (Page_Number == 1) Main_Page();
  else if (Page_Number == 2) Relay_Page();
  else if (Page_Number == 3) Voltmeter_Page();


} // END MARKER - Top_Bar

void Top_Bar_Touch() {

  if (!myTouch.dataAvailable()) return;

  else if (Touch_Input_Y > 0 && Touch_Input_Y < myGLCD.Get_Button_Size_Y()) {

    if (Top_Bar_Ignore_Input_Until > millis()) return;




    // --------------------------------------------- Page Down ---------------------------------------------
    if (Touch_Input_X > 0 && Touch_Input_X < 100 && Page_Number != 1) {
      Page_Number --;

      Serial.print("Top Bar - Page Down to: "); // REMOVE ME
      Serial.println(Page_Number); // REMOVE ME
      Top_Bar();
    }

    // --------------------------------------------- Page Up ---------------------------------------------
    else if (Touch_Input_X > 700 && Touch_Input_X < 800 && Page_Number != Page_Number_Last) {
      Page_Number ++;

      Serial.print("Top Bar - Page Up to: "); // REMOVE ME
      Serial.println(Page_Number); // REMOVE ME
      Top_Bar();
    }

  Top_Bar_Ignore_Input_Until = millis() + Default_Ignore_Input_For;

  } // END MARKER - if (Touch_Input_Y > 0 && Touch_Input_Y < myGLCD.Button_Size_Y())

} // END MARKER - Top_Bar_Touch


void setup() {

  Serial.begin(115200);

  while (Serial.available() < 0) {
    delay(100);
  }

  Serial.println("Booting");

  myGLCD.InitLCD();
  myGLCD.setFont(GroteskBold16x32);

  myTouch.InitTouch();
  myTouch.setPrecision(PREC_MEDIUM);

  Display_Center_X = myGLCD.getDisplayXSize() / 2;
  Display_Center_Y = myGLCD.getDisplayYSize() / 2;

  myGLCD.fillScr(0xF800);
  myGLCD.setBackColor(0x0000);
  myGLCD.print(String("Booting"), CENTER, Display_Center_Y - 5);

  myGLCD.Set_Button_Matrix_Top_Bar_Size(50);
  myTouch.Set_Button_Matrix_Top_Bar_Size(myGLCD.Get_Button_Matrix_Top_Bar_Size());

  delay(500);

  myGLCD.Center_Text(true);

  /*
  0x07E0 = Blue
  0xF800 = Green
  0xFFFF = White
  */

  myGLCD.Set_Button_Color(0x07E0);
  myGLCD.Set_Button_Back_Color(0x07E0);

  myGLCD.Set_Button_Edge_Color(0xFFFF);
  myGLCD.Set_Button_Text_Color(0xFFFF);

  myTouch.Set_Stabilize_Input(250, 250);

  myTouch.getX_Flip_Output(800);
  myTouch.getY_Flip_Output(480);

  myGLCD.print(String("Boot Done"), CENTER, Display_Center_Y - 5);
  Serial.println("Boot Done");

  delay(500);

  Top_Bar();

}


void Touch_Check() {

  myTouch.read();

  Touch_Input_X = myTouch.getX();
  Touch_Input_Y = myTouch.getY();

  if (myTouch.Stabilize_Input(Touch_Input_X, Touch_Input_Y) == 1)  return; // Touch input diviated to much returning


  Top_Bar_Touch();

  // --------------------------------------------- 1 - Main Page ---------------------------------------------
  if (Page_Number == 1) {
  //  Main_Page_Touch();
  }

  // --------------------------------------------- 2 - Relay Page ---------------------------------------------
  else if (Page_Number == 2) { // CHANGE BELOW
  }
} // End Marker - Touch_Check



void loop() {

  Touch_Check();

} // END MARKER - Loop
